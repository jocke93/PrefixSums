package prefixsum;

import static com.maxeler.maxcompiler.v2.managers.standard.Manager.link;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.IOLink.IODestination;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;

public class PrefixSumManager {

	private static final String s_kernelName = "PrefixSumKernel";
	public static void main(String[] args) {
		EngineParameters params = new EngineParameters(args);
		Manager manager = new Manager(params);
		Kernel kernel = new PrefixSumKernel(manager.makeKernelParameters(s_kernelName));
		manager.setKernel(kernel);
		manager.setIO(link("x",IODestination.CPU), link("z", IODestination.CPU));

		manager.createSLiCinterface(interfaceDefault());

		configBuild(manager, params);

		manager.build();
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes type = CPUTypes.INT8;
		int size = type.sizeInBytes();

		InterfaceParam  N = engine_interface.addParam("N", CPUTypes.INT);
		InterfaceParam loopOffset = engine_interface.getAutoLoopOffset(s_kernelName,"loop");
		engine_interface.ignoreAutoLoopOffset(s_kernelName, "loop");

		engine_interface.setTicks(s_kernelName, N*loopOffset);
		engine_interface.setStream("x", type, N * size);
		engine_interface.setStream("z", type, N * size);
		return engine_interface;
	}
	private static void configBuild(Manager manager, EngineParameters params) {
		manager.setEnableStreamStatusBlocks(false);
		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}
}
